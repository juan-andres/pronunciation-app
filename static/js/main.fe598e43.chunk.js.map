{"version":3,"sources":["reducers/recorderReducer.js","reducers/wordsReducer.js","reducers/index.js","store.js","components/WordForm.js","components/Word.js","components/WordsList.js","components/Recorder.js","App.js","index.js"],"names":["startRecorder","word","type","data","fetchWords","tries","successes","addWord","dispatch","fetch","concat","then","response","status","recordWordTry","recordWordSuccess","initialState","combineReducers","recorder","state","arguments","length","undefined","action","Object","objectSpread","recordingState","heardWord","words","toConsumableArray","slice","find","w","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","WordForm","wordInput","onClick","_this","props","onChange","e","setState","defineProperty","target","name","value","react_default","a","createElement","className","this","React","Component","connect","Word","utterThis","SpeechSynthesisUtterance","synth","speechSynthesis","voice","getVoices","speak","onRecord","_this$props$recorder","stopRecorder","testing","wordClasses","classNames","animated","pulse","link","has-text-link","level-item","buttonClasses","infinite","slow","button","is-primary","is-link","heartBeat","WordsList","map","Word_Word","assign","key","Recorder","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","recognitionEngine","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onerror","recordingWord","_props$recorder","grammar","join","speechRecognitionList","webkitSpeechGrammarList","addFromString","grammars","onresult","newHeardWord","results","transcript","toLowerCase","setHeardWord","onnomatch","start","abort","setTimeout","App","es","Recorder_Recorder","WordsList_WordsList","WordForm_WordForm","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.fe598e43.chunk.js","sourcesContent":["function startRecorder(word) {\n  return {\n    type: 'RECORDER_START',\n    data: word,\n  };\n}\n\nfunction stopRecorder() {\n  return {\n    type: 'RECORDER_STOP',\n  };\n}\n\nfunction setHeardWord(word) {\n  return {\n    type: 'SET_HEARD_WORD',\n    data: word,\n  }\n}\n\nfunction recorderReducer(state = {}, action) {\n  switch (action.type) {\n    case 'RECORDER_START':\n      return {\n        ...state,\n        recordingState: 'recording',\n        word: action.data,\n      };\n    case 'RECORDER_STOP':\n      return {\n        ...state,\n        recordingState: 'idle',\n        word: null,\n      };\n    case 'SET_HEARD_WORD':\n      return {\n        ...state,\n        heardWord: action.data,\n      };\n    default:\n      return state;\n  }\n}\n\nexport {\n  setHeardWord,\n  recorderReducer,\n  startRecorder,\n  stopRecorder,\n};\n","const fetchWords = () => {\n  return {\n    type: 'FETCH_WORDS',\n    data: [\n      {word: 'circuit', tries: 0, successes: 0},\n      {word: 'ephemeral', tries: 0, successes: 0},\n    ],\n  };\n};\n\nconst addWord = word => dispatch => {\n  fetch(`https://mydictionaryapi.appspot.com/?define=${word}`)\n  .then(response => {\n    if (response.status === 200) {\n      dispatch({\n        type: 'ADD_WORD',\n        data: {\n          word,\n          tries: 0,\n          successes: 0,\n        },\n      });\n    }\n  });\n}\n\nconst recordWordTry = word => {\n  return {\n    type: 'RECORD_WORD_TRY',\n    word,\n  };\n}\n\nconst recordWordSuccess = word => {\n  return {\n    type: 'RECORD_WORD_SUCCESS',\n    word,\n  };\n}\n\nconst initialState = {\n  data: [],\n};\n\nfunction wordsReducer(state = initialState, action) {\n  let data, word;\n  switch (action.type) {\n    case 'FETCH_WORDS':\n      return {\n        ...state,\n        data: action.data,\n      };\n    case 'ADD_WORD':\n      return {\n        ...state,\n        data: [...state.data, action.data],\n      }\n    case 'RECORD_WORD_TRY':\n      data = state.data.slice();\n      word = data.find(w => w.word === action.word);\n      word.tries += 1;\n      return {\n        ...state,\n        data,\n      };\n    case 'RECORD_WORD_SUCCESS':\n      data = state.data.slice();\n      word = data.find(w => w.word === action.word);\n      word.successes += 1;\n      return {\n        ...state,\n        data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport {\n  wordsReducer,\n  fetchWords,\n  addWord,\n  recordWordTry,\n  recordWordSuccess,\n};\n","import {combineReducers} from 'redux';\n\nimport {recorderReducer} from './recorderReducer';\nimport {wordsReducer} from './wordsReducer';\n\nexport default combineReducers({\n  recorder: recorderReducer,\n  words: wordsReducer,\n});\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  {},\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n\nexport {\n  store,\n};\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {addWord} from '../reducers/wordsReducer';\n\nimport './WordForm.css';\n\n\nclass WordForm extends React.Component {\n  state = {\n    'wordInput': '',\n  }\n  onClick = () => {\n    this.props.addWord(this.state.wordInput);\n  }\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"formWrapper\">\n        <div className=\"level-item field has-addons\">\n          <div className=\"control\">\n            <input\n              className=\"input is-large\"\n              type=\"text\"\n              name=\"wordInput\"\n              onChange={this.onChange}\n              value={this.state.wordInput}\n            />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-large\" onClick={this.onClick}>\n              add\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addWord: data => dispatch(addWord(data))\n  };\n}\n\nWordForm = connect(null, mapDispatchToProps)(WordForm);\n\nexport {\n  WordForm,\n};\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport classNames from 'classnames';\n\nimport {startRecorder, stopRecorder} from '../reducers/recorderReducer';\n\nimport './Word.css';\n\nclass Word extends React.Component {\n  onClick = () => {\n    var utterThis = new SpeechSynthesisUtterance(this.props.word);\n    var synth = window.speechSynthesis;\n    utterThis.voice = synth.getVoices()[0];\n    synth.speak(utterThis);\n  }\n\n  onRecord = () => {\n    const {recordingState, word} = this.props.recorder;\n    if (recordingState === 'recording' && word === this.props.word) {\n      this.props.stopRecorder();\n    } else {\n      this.props.startRecorder(this.props.word);\n    }\n  }\n\n  render() {\n    const testing = this.props.recorder.word === this.props.word;\n\n    const wordClasses = classNames({\n      'animated': true,\n      'pulse': true,\n      'link': true,\n      'has-text-link': true,\n      'level-item': true,\n    });\n\n    const buttonClasses = classNames({\n      'animated': true,\n      'infinite': true,\n      'slow': true,\n      'level-item': true,\n      'button': true,\n      'is-primary': testing,\n      'is-link': !testing,\n      'heartBeat': testing,\n    });\n\n    return (\n      <div className=\"wordWrapper is-mobile\">\n        <div className=\"level-left\">\n          <div className={wordClasses} onClick={this.onClick}>\n            {`${this.props.word} (${this.props.successes}/${this.props.tries})`}\n          </div>\n        </div>\n        <div className=\"level-right\">\n          <button className={buttonClasses} onClick={this.onRecord}>\n            {testing ? 'stop' : 'test me'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    words: state.words,\n    recorder: state.recorder,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startRecorder: word => dispatch(startRecorder(word)),\n    stopRecorder: () => dispatch(stopRecorder()),\n  };\n}\n\nWord = connect(mapStateToProps, mapDispatchToProps)(Word);\n\nexport {\n  Word,\n};\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {fetchWords} from '../reducers/wordsReducer';\nimport {Word} from './Word';\n\n\nclass WordsList extends React.Component {\n  componentDidMount() {\n    this.props.fetchWords();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.props.words.data.map(w => (<Word key={w.word} {...w} />))}\n      </ul>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    words: state.words,\n    recorder: state.recorder,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchWords: () => dispatch(fetchWords()),\n  };\n}\n\nWordsList = connect(mapStateToProps, mapDispatchToProps)(WordsList);\n\nexport {\n  WordsList,\n};\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {recordWordTry, recordWordSuccess} from '../reducers/wordsReducer';\nimport {startRecorder, stopRecorder, setHeardWord} from '../reducers/recorderReducer';\n\nimport './Recorder.css';\n\n\nclass Recorder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const recognitionEngine = new window.webkitSpeechRecognition();\n    recognitionEngine.lang = 'en-US';\n    recognitionEngine.interimResults = false;\n    recognitionEngine.maxAlternatives = 1;\n\n    recognitionEngine.onerror = props.stopRecorder;\n\n    this.state = {\n      recordingWord: null,\n      recognitionEngine,\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {recordingState, word, heardWord} = props.recorder;\n\n    if (state.recordingWord !== word && recordingState === 'recording') {\n      const words = props.words.data.map(w => w.word);\n      const grammar = `#JSGF V1.0; grammar words; public <word> = ${words.join(' | ')};`\n      const speechRecognitionList = new window.webkitSpeechGrammarList();\n      speechRecognitionList.addFromString(grammar, 1);\n      state.recognitionEngine.grammars = speechRecognitionList;\n\n      state.recognitionEngine.onresult = e => {\n        const newHeardWord = e.results[0][0].transcript.toLowerCase();\n\n        if (newHeardWord === word) {\n          props.recordWordSuccess(word);\n        }\n        props.recordWordTry(word);\n        props.setHeardWord(newHeardWord);\n        props.stopRecorder();\n      }\n\n      state.recognitionEngine.onnomatch = () => {\n        props.recordWordTry(word);\n        props.stopRecorder();\n      };\n\n      state.recognitionEngine.start();\n\n      return {\n        ...state,\n        recordingWord: word,\n      };\n    }\n\n    if (state.recordingWord && !heardWord && recordingState === 'idle') {\n      state.recognitionEngine.abort();\n      return {\n        ...state,\n        recordingWord: null,\n      }\n    }\n\n    if (recordingState === 'idle' && state.recognitionEngine.onresult) {\n      state.recognitionEngine.onresult = null;\n      state.recognitionEngine.onnomatch = null;\n      state.recognitionEngine.abort();\n      setTimeout(() => {\n        props.setHeardWord(null);\n      }, 2000);\n    }\n\n    return null;\n  }\n\n  render() {\n    const {heardWord} = this.props.recorder;\n    if (heardWord) {\n      if (heardWord === this.state.recordingWord) {\n        return (\n          <div className=\"has-background-success messageWrapper\">\n            Good job!\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"has-background-warning messageWrapper\">\n            {`heard \"${heardWord}\"`}\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div className=\"messageWrapper\">\n        {this.state.recordingWord ? `Listening for ${this.state.recordingWord}` : 'Click on the test me button on a word in the list'}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    recorder: state.recorder,\n    words: state.words,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    recordWordTry: word => dispatch(recordWordTry(word)),\n    recordWordSuccess: word => dispatch(recordWordSuccess(word)),\n    startRecorder: word => dispatch(startRecorder(word)),\n    stopRecorder: () => dispatch(stopRecorder()),\n    setHeardWord: word => dispatch(setHeardWord(word)),\n  };\n}\n\nRecorder = connect(mapStateToProps, mapDispatchToProps)(Recorder);\n\nexport {\n  Recorder,\n};\n","import React from 'react';\nimport {Provider} from 'react-redux';\n\nimport {store} from './store';\nimport {WordForm} from './components/WordForm';\nimport {WordsList} from './components/WordsList';\nimport {Recorder} from './components/Recorder';\n\nimport './App.css';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App columns is-mobile is-centered\">\n          <div className=\"column is-half-tablet is-one-third-desktop\">\n            <Recorder />\n            <WordsList />\n            <WordForm />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}